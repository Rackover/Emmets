<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_window</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hostWindow = createWindow(translate("CAVE_TIP", "changePlanet"), "", array(noone), true);

depth = hostWindow.depth-1;

hostWindow.width = 320;
hostWindow.height = SCREEN_HEIGHT-UI_TOP_BAND-UI_LEFT_BAND-20;
hostWindow.x = (SCREEN_WIDTH-hostWindow.width)/2;
hostWindow.y = (SCREEN_HEIGHT-hostWindow.height)/2;

x = hostWindow.x+UI_LEFT_BAND;
y = hostWindow.y+UI_TOP_BAND;

interiorPadding = 8;
textInteriorPadding = 5;

xButtonSize = UI_TOP_BAND-2;

hostWindow.controlButtonsSize = xButtonSize+interiorPadding;

width = hostWindow.width - UI_RIGHT_BAND - UI_LEFT_BAND;
height = hostWindow.height - UI_TOP_BAND - UI_LEFT_BAND;

colors = 
        array(COLOR_FOREGROUND(),
                COLOR_BACKGROUND(), 
                COLOR_SHADOW());
hoveredColors = 
        array(COLOR_BACKGROUND(),
                COLOR_FOREGROUND(), 
                COLOR_SHADOW());
                
hoveredX = false;

buttonMargin = 4;
buttonWSpacing = 12;
buttonWidth = 96;
buttonZoneHeight = 32;
buttonHeight = buttonZoneHeight-buttonMargin;

leftText = array(noone);
rightText = array(noone);

cave = noone;

calculated = false;
totalCost = 0;

hoveredBack = false;
hoveredOK = false;
disabledOK = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// EXIT IF WINDOWS ONTOP
willExit = anotherWindowOnTop();
if (willExit){
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var left = x+interiorPadding;
var right = x+width-interiorPadding-UI_RIGHT_BAND;
var top = y+interiorPadding+UI_TOP_BAND;
var bottom = y+height+interiorPadding-UI_LEFT_BAND-UI_TOP_BAND;

// Calculating relocation cost
if (!calculated){
    totalCosts = 0;
    // Relocation cost is 1/10 of the risk prime)
    var rp = ds_list_size(object_station.crew) * (object_station.emmetRiskPrime/10);
    var core = RELOCATION_PRICE;
    rightText = array(
         core,
         rp
      );        
    totalCost += rp + core;
        
    leftText = array(
        translate("RELOCATION", "price"),
        string_replace(translate("RELOCATION", "relocationPrime"), "%s", string(ds_list_size(object_station.crew)))
    );
    
    var buildings = getBuildings();
    
    for (var i = 0; i &lt; array_length_1d(buildings); i++){
        var building = buildings[i];
        if (getHardStock(building) &lt;= 0){
            continue;
        }
        
        var amount = getHardStock(building);
        var buildingPrice = getBuilding(building, "size")*RELOCATION_PRICE_PER_BUILDING*amount;
        var name = getBuilding(building, "name");
        
        leftText[array_length_1d(leftText)] = name+" x"+string(amount);
        rightText[array_length_1d(rightText)] = buildingPrice;
        totalCost += buildingPrice;
    }
    
    var rscs = getFancyMaterials();
    for (var i = 0; i &lt; array_length_1d(rscs); i++){
        var rsc = rscs[i];
        if (getHardStock(rsc) &lt;= 0){
            continue;
        }
        
        var amount = getHardStock(rsc);        
        var rscPrice = amount*RELOCATION_PRICE_PER_RSC;
        var name = translate("RSC", rsc);
        
        leftText[array_length_1d(leftText)] = name+" ("+string(amount*10)+"kg)";
        rightText[array_length_1d(rightText)] = rscPrice;
        totalCost += rscPrice;
    }
    
    
    rightText[array_length_1d(rightText)] = "=====";
    rightText[array_length_1d(rightText)] = ""; 
    rightText[array_length_1d(rightText)] =  totalCost;
    rightText[array_length_1d(rightText)] = numberFormat(object_station.company[? "funds"])+" - "+numberFormat(totalCost);
    rightText[array_length_1d(rightText)] =  object_station.company[? "funds"]-totalCost;
    
    leftText[array_length_1d(leftText)] = "====="; 
    leftText[array_length_1d(leftText)] = ""; 
    leftText[array_length_1d(leftText)] = translate("PREMISSION", "total");
    leftText[array_length_1d(leftText)] = translate("PREMISSION", "finalFunding");
    leftText[array_length_1d(leftText)] = ""; 
    
    calculated = true;
}

colors = 
        array(COLOR_FOREGROUND(),
                COLOR_BACKGROUND(), 
                COLOR_SHADOW());
hoveredColors = 
        array(COLOR_BACKGROUND(),
                COLOR_FOREGROUND(), 
                COLOR_SHADOW());


/// 0. Close button
var pos = array(x+width-xButtonSize, hostWindow.y, x+width+UI_RIGHT_BAND, hostWindow.y+xButtonSize);
if (mouseIn(pos)){
    hoveredX = true;
    if (global.i[I_SELECT]){
        playSfx(sound_sfx_select);
        closeWindow(hostWindow);
        instance_destroy();
        log("CLOSED");
    }
}
else{
    hoveredX = false;
}


var confirmBlock = array(right-buttonWidth, bottom-buttonZoneHeight, right, bottom);
if (mouseIn(confirmBlock) &amp;&amp; !disabledOK){
    hoveredOK = true;
    if (global.i[I_SELECT]){
        playSfx(sound_sfx_select);
        var rel = instance_create(0,0, object_ui_window_relocation_loading);
        rel.planetId = rrandom(PLANETS-1);
        room_goto(station_main);
        remFunds(totalCosts);
        instance_destroy();
        with(hostWindow){
            instance_destroy();
        }
    }
}
else{
    hoveredOK = false;
}

var backBlock = array(left, bottom-buttonZoneHeight, left+buttonWidth, bottom);
if (mouseIn(backBlock)){
    hoveredBack = true;
    if (global.i[I_SELECT]){
        playSfx(sound_sfx_select);
        closeWindow(hostWindow);
        instance_destroy();
    }
}
else{
    hoveredBack = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var left = x+interiorPadding;
var right = x+width-interiorPadding-UI_RIGHT_BAND;
var top = y+interiorPadding+UI_TOP_BAND;
var bottom = y+height+interiorPadding-UI_LEFT_BAND-UI_TOP_BAND;


/// 0. Close button
var pos = array(x+width-xButtonSize, hostWindow.y, x+width+UI_RIGHT_BAND, hostWindow.y+xButtonSize);

var colorsUsed = hostWindow.colors;
if (hoveredX){
    colorsUsed = hostWindow.hoveredColors;
}

drawBlock(pos, colorsUsed);

draw_set_valign(fa_middle);
draw_set_halign(fa_center);
drawShadowedText(pos[0]+(pos[2]-pos[0])/2, pos[1]+(pos[3]-pos[1])/2, "X", colorsUsed);

/// 1. Draw background
draw_set_color(COLOR_SHADOW());
draw_rectangle(x, y, x+width-2,  y+height-2, false);

draw_set_color(COLOR_FOREGROUND());
draw_rectangle(x, y, x+width+2,  y+height+2, false);

draw_set_color(COLOR_BACKGROUND());
draw_rectangle(x, y, x+width, y+height, false);

draw_set_font(font_ui);

/// 2. Interior

draw_set_valign(fa_top);
var lh = string_height("A");
var relocateString = translate("RELOCATION", "relocate");
var textStart = top+interiorPadding+string_height_ext(relocateString, -1, right-left-interiorPadding*2)+lh;

drawShadowedText(floormean(left, right), floor(top), relocateString, colors, right-left-interiorPadding*2);


for (var i = 0; i &lt; array_length_1d(leftText); i++){
    draw_set_font(font_ui);
    
    var text = leftText[i];
    var cost = rightText[i];
    var customColors = array(COLOR_FOREGROUND(), COLOR_BACKGROUND(), COLOR_SHADOW());
    
    draw_set_halign(fa_left);
    drawShadowedText(floor(left), floor(textStart+lh*i), text);
    
    if (i == array_length_1d(leftText)-1){
        draw_set_font(font_name);
        var minus = "";
        if (cost &lt; 0){
            customColors[0] = c_red;
        }
        if (cost &lt; 0){
            minus = "-";
            cost *= -1;
        }
        cost = minus + "₵"+numberFormat(cost);
    }
    else if (is_real(cost)){
        cost = "- ₵"+numberFormat(cost);
    }
    
    draw_set_halign(fa_right);
    drawShadowedText(floor(right), floor(textStart+lh*i), cost, customColors);
}

/// 3. Buttons
draw_set_valign(fa_middle);
draw_set_halign(fa_center);
var myColors = colors;
if (hoveredBack){
    myColors = hoveredColors;
}
var backBlock = array(left, bottom-buttonZoneHeight, left+buttonWidth, bottom);
drawBlock(backBlock, myColors);
drawShadowedText(floormean(backBlock[0], backBlock[2]), floormean(backBlock[1], backBlock[3]), translate("GENERAL_UI", "cancel"));

var myColors = colors;
if (disabledOK){
    myColors = disabledColors;
}
else if (hoveredOK){
    myColors = hoveredColors;
}
var confirmBlock = array(right-buttonWidth, bottom-buttonZoneHeight, right, bottom);
drawBlock(confirmBlock, myColors);
drawShadowedText(floormean(confirmBlock[0], confirmBlock[2]), floormean(confirmBlock[1], confirmBlock[3]), translate("PREMISSION", "letsgo"));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
