<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_eu_logo</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hostWindow = createWindow(translate("EMMETSUNITED", "browser"), "",array(noone), true);
//array(translate("GENERAL_UI", "quit"), translate("GENERAL_UI", "manageCrew"), translate("STATION_MAIN", "nextMission")),
/*
hostWindow.width = SCREEN_WIDTH-UI_LEFT_BAND-UI_RIGHT_BAND;
hostWindow.height = SCREEN_HEIGHT-UI_TOP_BAND-UI_LEFT_BAND;
hostWindow.x = UI_LEFT_BAND;
hostWindow.y = UI_TOP_BAND;
*/

depth = hostWindow.depth-1;

x = hostWindow.x+UI_LEFT_BAND;
y = hostWindow.y+UI_TOP_BAND;

interiorPadding = 8;
textInteriorPadding = 5;

xButtonSize = UI_TOP_BAND-2;

hostWindow.controlButtonsSize = xButtonSize+interiorPadding;

width = hostWindow.width - UI_RIGHT_BAND - UI_LEFT_BAND;
height = hostWindow.height - UI_TOP_BAND - UI_LEFT_BAND;

state = EMMETSUNITED_HOME;
hoveredX = false;

buttonMargin = 4;
buttonWSpacing = 12;
buttonWidth = 64;
buttonZoneHeight = 32;
buttonHeight = buttonZoneHeight-buttonMargin;

/// BGM
bgmFade(sound_bgm_eu, 1000);

/// HOME
rightPanelButtons = array(translate("EMMETSUNITED", "gotoMarket"), translate("EMMETSUNITED", "products"), translate("EMMETSUNITED", "recruit"), translate("GENERAL_UI", "disconnect"));
rightPanelSprites = array(sprite_eu_item_resell, sprite_eu_item_products, sprite_eu_item_recruit, sprite_eu_item_disconnect);
rightPanelWidthProportion = 0.45;
rightPanelHSpacing = 12;
rightPanelBonusHeight = 16;
rightPanelHoveredButton = noone;
homeScrollValue = 0;

/// RESELL
selectedMaterial = noone;
listWidthPercent = 0.5;
lineSpacing = 3;
listDetailSpacing = 12;
listWidth = (width-interiorPadding*2)*listWidthPercent;
disabledRscs = ds_map_logcreate();
marketHistory = 5;
resellButtons = array(-1, -5, -10);

hoveredResellButton = noone;
resellHoveringOK = false;

/// PRODUCTS
productsList = array(object_building_refinery,
                     object_building_uplinker,
                     object_building_predeployed_battery,
                     object_building_stocker,
                     object_building_powerplant,
                     object_building_stabilizer,
                     "upgrade",
                     TRAINING_DYNAMITE,
                     TRAINING_GEOLOG
                     );
productsSize = 96;
productsPerLine = 3;
productsSpacing = 8;
hoveredProduct = noone;
selectedProduct = "upgrade";
productsHoveringOK = false;
hoveredBuyBox = false;

/// RECRUIT
selectedEmmet = noone;
hoveredEmmet = noone;
recruitHoveringOK = false;
recruitScrollPosition = 0;
scrollHandleHeight = 16;
recruitEnableHandles = array(false, false);
recruitHoveredHandles = array(false, false);


/// TUTORIAL MARKERS
if (!checkMarker("sell")){
    createWindow(
        translate("GENERAL_UI", "notice"),
        translate("MARKERS", "sell")
        );
    validateMarker("sell");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_map_logdestroy(disabledRscs);
bgmFade();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// EXIT IF WINDOWS ONTOP
willExit = anotherWindowOnTop();
if (willExit){
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var vx = view_xview;
var vy = view_yview;

var left = x+interiorPadding;
var right = x+width-interiorPadding-UI_RIGHT_BAND;
var top = y+interiorPadding;
var bottom = y+height+interiorPadding-UI_LEFT_BAND-UI_TOP_BAND;

var pos = array(vx+x+width-xButtonSize, vy+y-UI_TOP_BAND, vx+x+width+UI_RIGHT_BAND, vy+y-UI_TOP_BAND+xButtonSize);
if mouseIn(pos){
    hoveredX = true;
    if (global.i[I_SELECT]){
        playSfx(sound_sfx_select);
        exitEmmetsUnited(); 
    }
}
else{
    hoveredX = false;
}

switch state{
    case EMMETSUNITED_HOME:

        var rpLeft = x + (1-rightPanelWidthProportion)*width;
        draw_set_font(font_emmetsunited_logo);
        var th = string_height("A");
        draw_set_font(font_tiniest);
        var hTop = top + th + textInteriorPadding*2+ string_height("A") + interiorPadding;
            
        /// 3. Newsfeed
        
        if (object_game.offlineMode){
            draw_set_valign(fa_top);
            draw_set_halign(fa_left);
            drawShadowedText(left+textInteriorPadding, hTop+textInteriorPadding, translate("EMMETSUNITED", "offlineNoNews"));
        }
        else{
            var w = (rpLeft-interiorPadding)-(x+interiorPadding) - textInteriorPadding;
            var th = 0;
            var news = object_game.euNews;
            for (var i = 0; i &lt; ds_list_size(news); i++){
                var new = formatNew(news[| i]);
                var title = new[0];
                var text = new[1];
                
                draw_set_font(font_ui);
                th += string_height_ext(title, -1, w);
                draw_set_font(font_tiniest);
                th += string_height_ext(text, -1, w);
                th += textInteriorPadding*3;
            }
            var block = array(left, hTop, rpLeft, hTop+th);
            if (mouseIn(block)){
                if (global.i[I_SCROLL_DOWN]){
                    homeScrollValue += 8;
                    homeScrollValue = min(th-(hTop), homeScrollValue);
                }
                else if (global.i[I_SCROLL_UP]){
                    homeScrollValue -= 8;
                    homeScrollValue = max(0, homeScrollValue);
                }
            }
        }
        var hoveredSomething = false;
        
        /// 4. Buttons
        for (var i = 0; i &lt; array_length_1d(rightPanelButtons); i++){
            var but = rightPanelButtons[i];
            var sprite = rightPanelSprites[i];
            var pos = array(
                rpLeft+interiorPadding,
                hTop+(sprite_get_height(sprite)+interiorPadding*2)*(i),
                right-interiorPadding,
                hTop+(sprite_get_height(sprite)+interiorPadding*2)*(i+1)-rightPanelHSpacing
            );
                      
            if (point_in_rectangle(global.i[I_X], global.i[I_Y], pos[0], pos[1], pos[2], pos[3])){
                rightPanelHoveredButton = i;
                hoveredSomething = true;
                if (global.i[I_SELECT]){
                    playSfx(sound_sfx_select);
                    hoveredSomething = false;
                    resellHoveringOK = true;
                    switch (rightPanelSprites[i]){
                        case sprite_eu_item_resell:
                            state = EMMETSUNITED_RESELL;
                            break;
                            
                        case sprite_eu_item_disconnect:
                            exitEmmetsUnited();
                            break;
                            
                        case sprite_eu_item_products:
                            state = EMMETSUNITED_PRODUCTS;
                            break;
                            
                        case sprite_eu_item_recruit:
                            state = EMMETSUNITED_RECRUIT;
                            break;
                    }
                }
            }
        }
        if (!hoveredSomething){
            rightPanelHoveredButton = noone;
        }
        break;
    
    case EMMETSUNITED_RESELL:
        
        /// Selecting material
        
        var rscs = getFancyMaterials();
        draw_set_font(font_ui);
        var lineHeight = string_height("A")+lineSpacing;
        var firstLineMargin = lineHeight/2;
        var skips = 0;
        var right = x+listWidth;
        var spriteMaxSize = 5;
    
        for (var i = 0; i&lt; array_length_1d(rscs); i++){
        
            var rsc = rscs[i];
            
            if (global.i[I_SELECT]){
            
                /// SELECTION CHECKBOX
                if (point_in_rectangle(global.i[I_X], global.i[I_Y],
                                left+textInteriorPadding-spriteMaxSize, 
                                top +textInteriorPadding+ lineHeight*(i+1-skips) + lineHeight/2+firstLineMargin-spriteMaxSize, 
                                left+textInteriorPadding+spriteMaxSize, 
                                top +textInteriorPadding+ lineHeight*(i+1-skips) + lineHeight/2+firstLineMargin+spriteMaxSize
                    )){
                    if (ds_map_exists(disabledRscs, rsc)){
                        ds_map_delete(disabledRscs, rsc);
                        playSfx(sound_sfx_select);
                    }
                    else{
                        disabledRscs[? rsc] = true;
                        playSfx(sound_sfx_select);
                    }
                }
                
                /// SELECTING MATERIAL
                else if (point_in_rectangle(global.i[I_X], global.i[I_Y], 
                                        left+1, 
                                        top+textInteriorPadding+lineHeight*(i+1-skips)+firstLineMargin, 
                                        right-1, 
                                        top+lineHeight*(i+2-skips)+lineHeight/2+firstLineMargin)){
                    selectedMaterial = i;
                }
            }
            
            /// Right zone
            var grLeft = right + interiorPadding;
            var fakeRight = x+width-UI_RIGHT_BAND;
            var hoveredSomething = false;
            /// Sell buttons            
            if (selectedMaterial == i){
            
                var offset = floor(height/2 + interiorPadding);
                
                var sellText = translate("EMMETSUNITED", "sellRes");
                var textWidth = string_width(sellText)+textInteriorPadding*2;
                
                for (var k = 0; k &lt; array_length_1d(resellButtons); k++){
                                    
                    var buttonZoneWidth = fakeRight-grLeft-textWidth;
                    var box = array(
                            grLeft+textWidth+(buttonZoneWidth/array_length_1d(resellButtons))*(k),
                            top+offset+buttonMargin,
                            grLeft+textWidth+(buttonZoneWidth/array_length_1d(resellButtons))*(k+1)-buttonWSpacing,
                            top+offset+buttonZoneHeight-buttonMargin    
                        );
                     
                    if (point_in_rectangle(global.i[I_X], global.i[I_Y],
                                            box[0], box[1], box[2], box[3])){
                        hoveredResellButton = k;
                        if (getHardStock(rsc) &gt; 0){
                            hoveredSomething = true;
                            if (global.i[I_SELECT]){
                                playSfx(sound_sfx_select);
                                sellHardStock(rsc, -resellButtons[k]);
                            }
                        }
                    }
                }
                if (!hoveredSomething){
                    hoveredResellButton = noone;
                }
            }
            
            /// OK Button
            
            var okBox = array(grLeft, bottom-buttonZoneHeight, fakeRight, bottom);
            
            
            if (point_in_rectangle(global.i[I_X], global.i[I_Y],
                    okBox[0], okBox[1], okBox[2], okBox[3])){
                
                resellHoveringOK = true;
                if (global.i[I_SELECT]){
                    // Pressed OK
                    saveStocks();
                    if (!object_game.offlineMode){
                        onlineSendSales(object_market.lastSales);
                    }
                    ds_map_clear(object_market.lastSales);
                    
                    state = EMMETSUNITED_HOME;
                }
            }
            else{
                resellHoveringOK = false;
            }
        }
        break;  
        
        
    case EMMETSUNITED_PRODUCTS:
                
        var right = x+listWidth;
        
        var txLeft = right + interiorPadding;
        var realRight = x+width-UI_RIGHT_BAND;
        
        var hoveredSomething = false;
        
        for (var i = 0; i &lt; array_length_1d(productsList); i++){
            var thisProduct = productsList[i];
            var canBuy,price,building;
            
            if (isBuilding(thisProduct)){
                price = getBuildingPrice(thisProduct);
                canBuy = object_station.company[? "funds"] &gt; price &amp;&amp; (getHardWeight() + getWeight(thisProduct) &lt;= getStationCapacity());
                building = true;
            }
            else if (isTraining(thisProduct)){
                price = getTrainingPrice(thisProduct);
                var has = true;
                for (var j = 0; j &lt; ds_list_size(object_station.crew); j++){
                    var em = ds_list_find_value(object_station.crew, j);
                    if (ds_list_find_index(em[? "trainings"], thisProduct) &lt; 0){
                        has = false;
                        break;
                    }
                }
                canBuy = object_station.company[? "funds"] &gt; price &amp;&amp; ds_list_size(object_station.crew) &gt; 0 &amp;&amp; !has;
                building = false;
            }
            else{
                building = false;
                price = UPGRADE_COST * object_station.company[? "level"]*1.5;
                canBuy = object_station.company[? "funds"] &gt; price;
            }
            var productSize =  ((right-left-interiorPadding*3 - productsSpacing)/productsPerLine);
            
            var posX = left + interiorPadding + (productsSpacing + productSize) *(i%productsPerLine);
            var posY = top + interiorPadding + (productsSpacing + productSize) * floor(i/productsPerLine)
            
            var productBlock = array(posX, posY, posX+productSize, posY+productSize);
            
            if (mouseIn(productBlock)){
                hoveredProduct = productsList[i];
                hoveredSomething = true;
                if (global.i[I_SELECT]){
                    playSfx(sound_sfx_select);
                    selectedProduct = productsList[i];
                }
            }
        
         /// RIGHT PART
            if (selectedProduct == thisProduct){
                /// Textbox
                
                var buyBox = array(txLeft, top+height/2+interiorPadding, realRight-interiorPadding, top+height/2+interiorPadding+buttonZoneHeight);
                
                if (mouseIn(buyBox) &amp;&amp; canBuy){
                    hoveredBuyBox = true;
                    if (global.i[I_SELECT]){
                        playSfx(sound_sfx_select);
                        if (building){
                            remFunds(price);
                            addHardStock(thisProduct);
                            addToStat('buildingsBought', 1);
                            addToStat('moneySpentOnBuildings', price);
                        }
                        else if (isTraining(thisProduct)){
                            var train = instance_create(0,0,object_ui_window_training);
                            train.training = thisProduct;
                            train.price = price;
                            /*
                            */
                        }
                        else{
                            remFunds(price);
                            object_station.company[? "level"]++;
                            maxStat("stationLevelReached", object_station.company[? "level"]);
                            addToStat('moneySpentOnUpgrades', price);
                        }
                    }
                }                        
                else{
                    hoveredBuyBox = false;
                }  
            }
        }                
        if (!hoveredSomething){
            hoveredProduct = noone;
        }
        
        /// OK Button
        
        var okBox = array(txLeft, bottom-buttonZoneHeight, realRight-interiorPadding, bottom);
                
        if (mouseIn(okBox)){
            
            productsHoveringOK = true;
            if (global.i[I_SELECT]){
                // Pressed OK
                playSfx(sound_sfx_select);
                state = EMMETSUNITED_HOME;
            }
        }
        else{
            productsHoveringOK = false;
        }
        
        break;  
        
        
    case EMMETSUNITED_RECRUIT:
                
        var right = x+listWidth;
        
        var txLeft = right + interiorPadding;
        var realRight = x+width-UI_RIGHT_BAND;
        
        var hoveredSomething = false;
        
        var crewList = object_market.marketCrew;
        
        var out = array(false, false);
                
        for (var i = 0; i &lt; ds_list_size(crewList); i++){
            var thisMember = crewList[|i];
            
             /// Calculate price
            var price = EMMET_MARKET_PRICE;
            var trainings = thisMember[? "trainings"];
            for (var j = 0; j &lt; ds_list_size(thisMember[? "trainings"]); j++){
                price += getTrainingPrice(trainings[| j]);
            }
            
                        
            var productSize =  ((right-left-interiorPadding*3 - productsSpacing)/productsPerLine);
            
            var posX = left + interiorPadding + (productsSpacing + productSize) *(i%productsPerLine);
            var posY = top + interiorPadding + (productsSpacing + productSize) * floor(i/productsPerLine) + scrollHandleHeight - recruitScrollPosition;
            
            /// Off screen, no need to draw it
            if (posY &lt; top + scrollHandleHeight){
                out[0] = true;
                continue;
            }
            
            if (posY+productSize-interiorPadding &gt; bottom - scrollHandleHeight){
                out[1] = true;
                continue;
            }
            
            var productBlock = array(posX, posY, posX+productSize, posY+productSize);
            
            if (mouseIn(productBlock)){
                hoveredEmmet = thisMember;
                hoveredSomething = true;
                if (global.i[I_SELECT]){
                    playSfx(sound_sfx_select);
                    selectedEmmet = thisMember;
                }
            }
        
         /// RIGHT PART
            if (selectedEmmet == thisMember){
                /// Textbox
                
                var buyBox = array(txLeft, top+height/2+interiorPadding, realRight-interiorPadding, top+height/2+interiorPadding+buttonZoneHeight);
                var canBuy = price &lt;= object_station.company[? "funds"] &amp;&amp; getStationCrewCapacity() &gt; ds_list_size(object_station.crew);
                
                if (mouseIn(buyBox) &amp;&amp; canBuy){
                    hoveredBuyBox = true;
                    if (global.i[I_SELECT]){
                        playSfx(sound_sfx_select);
                        remFunds(price);
                        var crewMember = json_decode(json_encode(thisMember));
                        addCrewMember(crewMember);
                        addToStat("emmetsBought", 1);
                        ds_list_delete(crewList, i);
                        if (object_game.offlineMode){
                            crewMember[?"origin"] = ORIGIN_MARKET;
                        }
                        else{
                            onlineBuyCrewMember(crewMember[? "eid"]);
                        }
                        saveCrew();
                    }
                }                        
                else{
                    hoveredBuyBox = false;
                }  
            }
        }         
    
        recruitEnableHandles = out;
        
        if (!hoveredSomething){
            hoveredProduct = noone;
        }
        
        /// HANDLES
        var upperHandle = array(left, top, right, top+scrollHandleHeight);
        if (mouseIn(upperHandle) &amp;&amp; recruitEnableHandles[0]){
            recruitHoveredHandles[0] = true;
            if (global.i[I_SELECT]){
                playSfx(sound_sfx_select);
                recruitScrollPosition -= 32;
            }
        }
        else{
            recruitHoveredHandles[0] = false;
        }
        
        
        var bottomHandle = array(left, bottom-scrollHandleHeight, right, bottom);
        if (mouseIn(bottomHandle) &amp;&amp; recruitEnableHandles[1]){
            recruitHoveredHandles[1] = true;
            if (global.i[I_SELECT]){
                playSfx(sound_sfx_select);
                recruitScrollPosition += 32;
            }
        }
        else{
            recruitHoveredHandles[1] = false;
        }
        /// OK Button
        
        var okBox = array(txLeft, bottom-buttonZoneHeight, realRight-interiorPadding, bottom);
                
        if (mouseIn(okBox)){
            
            recruitHoveringOK = true;
            if (global.i[I_SELECT]){
                // Pressed OK
                playSfx(sound_sfx_select);
                state = EMMETSUNITED_HOME;
            }
        }
        else{
            recruitHoveringOK = false;
        }
        
        break;
        
       
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
colors = array(COLOR_FOREGROUND(), c_black, COLOR_SHADOW());
hoveredColors = array(c_black, COLOR_FOREGROUND(), COLOR_SHADOW());
greyedColors = array(COLOR_BACKGROUND(), c_black, COLOR_SHADOW());

var left = x+interiorPadding;
var right = x+width-interiorPadding-UI_RIGHT_BAND;
var top = y+interiorPadding;
var bottom = y+height+interiorPadding-UI_LEFT_BAND-UI_TOP_BAND;

/// 0. Close button
var pos = array(x+width-xButtonSize, hostWindow.y, x+width+UI_RIGHT_BAND, hostWindow.y+xButtonSize);

var colorsUsed = hostWindow.colors;
if (hoveredX){
    colorsUsed = hostWindow.hoveredColors;
}

drawBlock(pos, colorsUsed);

draw_set_valign(fa_middle);
draw_set_halign(fa_center);
drawShadowedText(pos[0]+(pos[2]-pos[0])/2, pos[1]+(pos[3]-pos[1])/2, "X", colorsUsed);

/// 1. Draw background
draw_set_color(COLOR_SHADOW());
draw_rectangle(x, y, x+width-2,  y+height-2, false);

draw_set_color(COLOR_FOREGROUND());
draw_rectangle(x, y, x+width+2,  y+height+2, false);

draw_set_color(c_black);
draw_rectangle(x, y, x+width, y+height, false);
            
switch state{
    case EMMETSUNITED_HOME:

        var rpLeft = x + (1-rightPanelWidthProportion)*width;
        
        /// 2. Draw logo
        draw_set_valign(fa_top);
        draw_set_halign(fa_left);
        draw_set_font(font_emmetsunited_logo);
        drawShadowedText(left+textInteriorPadding, top+textInteriorPadding, translate("GENERAL_UI", "emmetsUnited"));
        var th = string_height("A");
        
        draw_set_font(font_tiniest);
        drawShadowedText(left+textInteriorPadding, top+th+textInteriorPadding, 
            stripAccents(translate("EMMETSUNITED", "devise")));
        
        var hTop = top + th + textInteriorPadding*2+ string_height("A") + interiorPadding;
            
        /// 3. Newsfeed
        
        if (object_game.offlineMode){
            draw_set_valign(fa_top);
            draw_set_halign(fa_left);
            drawShadowedText(left+textInteriorPadding, hTop+textInteriorPadding, stripAccents(translate("EMMETSUNITED", "offlineNoNews")));
        }
        else{
            var surf = surface_create(rpLeft - (x+interiorPadding), bottom-hTop-textInteriorPadding*2);
            
            if (surface_exists(surf)){
                surface_set_target( surf );
                draw_clear_alpha(c_black, 1);
                
                var news = object_game.euNews;
                var w = (rpLeft-interiorPadding)-(x+interiorPadding) - textInteriorPadding;
                var th = 0;
                
                draw_set_valign(fa_top);
                draw_set_halign(fa_left);
                
                for (var i = 0; i &lt; ds_list_size(news); i++){
                    var newMap = news[| i];
                    var new = formatNew(news[| i]);
                    var title = new[0];
                    var text = stripAccents(new[1]);
                    
                    draw_set_font(font_ui);
                    drawShadowedText(textInteriorPadding, textInteriorPadding+th-homeScrollValue, title, colors ,w );
                    /*
                    draw_set_halign(fa_right);
                    var nid = string(newMap[? "id"]);
                    drawShadowedText(rpLeft-textInteriorPadding, textInteriorPadding+th-homeScrollValue, "\#"+nid, colors ,w );
                    */
                    var titleHeight = string_height_ext(title, -1, w)+textInteriorPadding;
                    
                    draw_set_halign(fa_left);
                    draw_set_font(font_tiniest);
                    drawShadowedText(textInteriorPadding, titleHeight+textInteriorPadding+th-homeScrollValue, text, colors , w);  
                    
                    draw_set_font(font_ui);
                    th += string_height_ext(title, -1, w);
                    draw_set_font(font_tiniest);
                    th += string_height_ext(text, -1, w);
                    
                    var lineBlock = array(textInteriorPadding+interiorPadding, th+interiorPadding*2-homeScrollValue, w-textInteriorPadding-interiorPadding, th+interiorPadding*2-homeScrollValue);
                    drawBlock(lineBlock, colors, 1);
                    
                    th += textInteriorPadding*3;
                }
                
                surface_reset_target();
                draw_surface(surf, left, hTop);
                surface_free(surf);
                
            }
        }
        
        draw_set_color(COLOR_FOREGROUND());
        draw_rectangle(x+interiorPadding, hTop, rpLeft-interiorPadding, bottom-interiorPadding, true);
        
        /// 4. Buttons
        for (var i = 0; i &lt; array_length_1d(rightPanelButtons); i++){
            var hovered = i == rightPanelHoveredButton;
            var but = rightPanelButtons[i];
            var sprite = rightPanelSprites[i];
            var pos = array(
                rpLeft+interiorPadding,
                hTop+(sprite_get_height(sprite)+interiorPadding*2)*(i),
                right-interiorPadding,
                hTop+(sprite_get_height(sprite)+interiorPadding*2)*(i+1)-rightPanelHSpacing
            );
            
            draw_set_color(COLOR_SHADOW());
            draw_roundrect(pos[0]+1, pos[1]+1, pos[2]+1, pos[3]+1, false);
            draw_set_color(c_black);
            if (hovered){
                draw_set_color(c_white);
            }
            draw_roundrect(pos[0], pos[1], pos[2], pos[3], false);
            draw_set_color(COLOR_FOREGROUND());
            draw_roundrect(pos[0], pos[1], pos[2], pos[3], true);
            
            draw_sprite(sprite, 0, pos[0]+textInteriorPadding/2, pos[1]+textInteriorPadding/2);
            
            draw_set_valign(fa_middle);
            draw_set_halign(fa_left);
            draw_set_font(font_ui);
            
            var colorsUsed = hostWindow.colors;
            if (hovered){
                colorsUsed = hostWindow.hoveredColors;
            }
             
            drawShadowedText(pos[0]+sprite_get_width(sprite)+textInteriorPadding, pos[1]+(pos[3]-pos[1])/2, but, colorsUsed);
        }
        break;
    
    case EMMETSUNITED_RESELL:        
        /// LEFT LIST
                        
        draw_set_color(COLOR_FOREGROUND());
        
        /// Cadre for the list
        draw_rectangle(left,
                        top,
                        x+listWidth,
                        bottom,
                        true);
        
        var right = x+listWidth;
        
        var rscs = getFancyMaterials();
        draw_set_font(font_ui);
        var lineHeight = string_height("A")+lineSpacing;
        var firstLineMargin = lineHeight/2;
        var spriteMaxSize = 5;
        
        var skips = 0;
        
        for (var i = -1; i&lt; array_length_1d(rscs); i++){
            if (i &lt; 0){
                draw_set_color(COLOR_FOREGROUND()); 
                draw_rectangle(left, top, right, top+lineHeight + lineHeight/2, true);
                
                draw_set_valign(fa_middle);
                
                draw_set_halign(fa_left);
                draw_text(floor(left+textInteriorPadding), floor(top +textInteriorPadding+ lineHeight/2), translate("CHOOSE_STOCK", "resource"));
                draw_set_halign(fa_right);
                draw_text(floor(right-textInteriorPadding), floor(top +textInteriorPadding+ lineHeight/2), translate("CHOOSE_STOCK", "amount"));
                
                continue;
            }
        
            var rsc = rscs[i];
            var rscColor = colorSum(rsc);
            var stock = getHardStock(rsc);
            var sprite = getRessource(rsc, "sprite");
            
            /// Colored background when the material is selected
            if (i == selectedMaterial){
                draw_set_color(rscColor);
                draw_rectangle(left+1, top+textInteriorPadding+lineHeight*(i+1-skips)+firstLineMargin, right-1, top+lineHeight*(i+2-skips)+lineHeight/2+firstLineMargin, false);
            }
            draw_set_valign(fa_middle);
            
            /// SELECTION CHECKBOX
                            
            draw_set_color(c_black);
            draw_rectangle(left+textInteriorPadding-spriteMaxSize, 
                            top +textInteriorPadding+ lineHeight*(i+1-skips) + lineHeight/2+firstLineMargin-spriteMaxSize, 
                            left+textInteriorPadding+spriteMaxSize, 
                            top +textInteriorPadding+ lineHeight*(i+1-skips) + lineHeight/2+firstLineMargin+spriteMaxSize, 
                            false);
                            
            draw_set_color(COLOR_FOREGROUND());
            draw_rectangle(left+textInteriorPadding-spriteMaxSize, 
                            top +textInteriorPadding+ lineHeight*(i+1-skips) + lineHeight/2+firstLineMargin-spriteMaxSize, 
                            left+textInteriorPadding+spriteMaxSize, 
                            top +textInteriorPadding+ lineHeight*(i+1-skips) + lineHeight/2+firstLineMargin+spriteMaxSize, 
                            true);
            
            if (is_undefined(disabledRscs[? rsc])){
                
                draw_sprite_ext(sprite_ui_rscCheckbox, 0, left+textInteriorPadding-spriteMaxSize+sprite_get_width(sprite_ui_rscCheckbox)/4, 
                            top +textInteriorPadding+ lineHeight*(i+1-skips) + lineHeight/2+firstLineMargin-spriteMaxSize+sprite_get_height(sprite_ui_rscCheckbox)/4,
                            1,1,0, c_lime, 1);
                            
            }
            
            var finalPadding = textInteriorPadding+spriteMaxSize+textInteriorPadding;
            
            var colorsUsed = hostWindow.colors;
            colorsUsed[0] = rscColor;
            if (i == selectedMaterial){
                colorsUsed = hostWindow.hoveredColors;
                colorsUsed[1] = rscColor;
            }
            
            draw_set_halign(fa_left);
            drawShadowedText(floor(left+finalPadding), top +textInteriorPadding+ lineHeight*(i+1-skips) + lineHeight/2+firstLineMargin, translate("RSC", rsc), colorsUsed);
            
            draw_set_halign(fa_right);
            drawShadowedText(floor(right-textInteriorPadding), top +textInteriorPadding+ lineHeight*(i+1-skips) + lineHeight/2+firstLineMargin, string(stock)+"0 kg", colorsUsed);
        }
        
        /// RIGHT ZONE
        var grLeft = right + interiorPadding;
        var right = x+width-UI_RIGHT_BAND;
        
        var graphBox = array(grLeft, top, right-interiorPadding, top+height/2);
        
        var bounds =  getMarketBounds();
        var maxValue = bounds[0];
        var minValue = bounds[1];
        var maxHeight = (graphBox[3]-graphBox[1])*0.9;
        var topMargin = ((graphBox[3]-graphBox[1])-maxHeight)/2;
        var maxWidth =  (graphBox[2]-graphBox[0])*0.75;
        var wm = graphBox[0];
        var hm = graphBox[1];
        
        var rscs = getFancyMaterials();
    
        draw_set_color(COLOR_BACKGROUND());
        draw_roundrect(graphBox[0], graphBox[1], graphBox[2], graphBox[3], false);
        
        /// Graph zone
        
        /// Little grey bars
        for (var i = 0; i &lt; marketHistory; i++){
            draw_set_color(COLOR_FOREGROUND());
            var pos = array(
                wm + (i/((marketHistory-1)))*(maxWidth), 
                hm +  topMargin + maxHeight,
                wm + (i/((marketHistory-1)))*(maxWidth), 
                hm +  topMargin,
                );
            draw_line(pos[0], pos[1], pos[2], pos[3]);
        }
        for (var j = 0; j &lt; array_length_1d(rscs); j++){
        
            var rsc = rscs[j];
            var color = colorSum(rsc);
            
            /// Sell buttons            
            if (selectedMaterial == j){
            
                var offset = floor(height/2 + interiorPadding);
                
                draw_set_font(font_ui);
                var sellText = translate("EMMETSUNITED", "sellRes");
                var textWidth = string_width(sellText)+textInteriorPadding*2;
                draw_set_halign(fa_left);
                drawShadowedText(floor(grLeft+textInteriorPadding), floor(top+offset+buttonZoneHeight/2), sellText);
                
                for (var k = 0; k &lt; array_length_1d(resellButtons); k++){
                    var boxText = string(resellButtons[k]*getWeight(rsc))
                                    +"kg";
                    var boxUnderText = numberFormat(floor(-1*resellButtons[k]*getCurrentPrice(rsc)))+
                                    "₵";
                                    
                    var buttonZoneWidth = right-grLeft-textWidth;
                    var box = array(
                            grLeft+textWidth+(buttonZoneWidth/array_length_1d(resellButtons))*(k),
                            top+offset+buttonMargin,
                            grLeft+textWidth+(buttonZoneWidth/array_length_1d(resellButtons))*(k+1)-buttonWSpacing,
                            top+offset+buttonZoneHeight-buttonMargin    
                        );
                    draw_set_halign(fa_center);
                    
                    draw_set_color(COLOR_SHADOW());
                    draw_roundrect(box[0]+1, box[1]+1, box[2]+1, box[3]+1, false);
                    if (hoveredResellButton == k &amp;&amp; getHardStock(rsc) &gt; 0){
                        draw_set_color(COLOR_FOREGROUND());
                        draw_roundrect(box[0], box[1], box[2], box[3], false);
                    }
                    draw_set_color(COLOR_FOREGROUND());
                    if (hoveredResellButton == k) draw_set_color(COLOR_BACKGROUND());
                    if (getHardStock(rsc) &lt;= 0) draw_set_color(COLOR_BACKGROUND());
                    
                    draw_roundrect(box[0], box[1], box[2], box[3], true);
                    
                    var colorsUsed = hostWindow.colors;
                    if (getHardStock(rsc) &lt;= 0){
                        colorsUsed = hostWindow.disabledColors
                    }
                    else if (hoveredResellButton == resellButtons[k]){
                        colorsUsed = hostWindow.hoveredColors;
                    }
                    draw_set_font(font_tiniest);
                    drawShadowedText(floor(box[0]+(box[2]-box[0])/2), floor(box[1]+(box[3]-box[1])/4), stripAccents(boxText), colorsUsed);
                    
                    draw_set_font(font_ui);
                    drawShadowedText(floor(box[0]+(box[2]-box[0])/2), floor(box[1]+((box[3]-box[1])*3)/4), boxUnderText, colorsUsed);
                }
            }
            
            
            /// Drawing graph line
            if (ds_map_exists(disabledRscs, rsc)){
                continue;
            }
            
            draw_set_color(color);
            draw_set_font(font_tiniest);
            draw_set_valign(fa_bottom);
            var lastPos = array(noone);
            
            
            for (var i = 0; i &lt; marketHistory; i++){
                var stepId = object_market.marketHistory-marketHistory+i;
                var step = object_market.marketQueue[| stepId];
                var value = step[? rsc];
                
                var pos = array(
                    wm + (i/((marketHistory-1)))*(maxWidth), 
                    hm +  topMargin + maxHeight- reverseLerp(minValue, maxValue, value)*(maxHeight));
                                    
                if (i &gt; 0){
                    var oldPos = lastPos;
                
                    draw_set_halign(fa_left);
                    draw_set_valign(fa_middle);
                    draw_line(pos[0], pos[1],
                            oldPos[0], oldPos[1]);
                    if (i == marketHistory-1){
                        var price = "₵"+numberFormat(floor(getCurrentPrice(rsc)));
                        draw_text(pos[0]+textInteriorPadding, pos[1], price);
                    }
                }
                lastPos = pos;
            }
        }
                
        
        /// OK Button
        
        var okBox = array(grLeft, bottom-buttonZoneHeight, right, bottom);
                
        if (resellHoveringOK){
            draw_set_color(COLOR_FOREGROUND());
            draw_roundrect(okBox[0], okBox[1], okBox[2], okBox[3], false);
        }
        draw_set_color(COLOR_FOREGROUND());
        if (resellHoveringOK) draw_set_color(COLOR_BACKGROUND());
        draw_roundrect(okBox[0], okBox[1], okBox[2], okBox[3], true);
        
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        
        var text = translate("GENERAL_UI", "back");
        
        draw_set_font(font_ui);
        
        var colorsUsed = hostWindow.colors;
        if (resellHoveringOK){
            colorsUsed = hostWindow.hoveredColors;
        }
                    
        drawShadowedText(okBox[0]+(okBox[2]-okBox[0])/2, okBox[1]+(okBox[3]-okBox[1])/2, text, colorsUsed);
        
    
        draw_set_color(COLOR_FOREGROUND());
        draw_roundrect(graphBox[0], graphBox[1], graphBox[2], graphBox[3], true);
        
        break;
        
        
    case EMMETSUNITED_PRODUCTS:
        draw_set_color(COLOR_FOREGROUND());
        
        /// Cadre for the list
        draw_rectangle(left,
                        top,
                        x+listWidth,
                        bottom,
                        true);
        
        var right = x+listWidth;
        
        var txLeft = right + interiorPadding;
        var realRight = x+width-UI_RIGHT_BAND;
        
        
        for (var i = 0; i &lt; array_length_1d(productsList); i++){
            var thisProduct = productsList[i];
            var price,sprite,needs,stock,buyingNotice,canBuy,productName;
            
            if (isTraining(thisProduct)){
                price = getTrainingPrice(thisProduct);
                var has = true;
                for (var j = 0; j &lt; ds_list_size(object_station.crew); j++){
                    var em = ds_list_find_value(object_station.crew, j);
                    if (ds_list_find_index(em[? "trainings"], thisProduct) &lt; 0){
                        has = false;
                        break;
                    }
                }
                canBuy = object_station.company[? "funds"] &gt; price &amp;&amp; ds_list_size(object_station.crew) &gt; 0 &amp;&amp; !has;
                sprite = getTrainingSprite(thisProduct);
                buyingNotice = translate("EMMET_TRAINING", thisProduct);
                needs = translate("TRAINING_TIP", thisProduct);
                productName = translate("EMMET_TRAINING", thisProduct);
            }
            else if (isBuilding(thisProduct)){
                price = getBuildingPrice(thisProduct);
                canBuy = object_station.company[? "funds"] &gt; price &amp;&amp; (getHardWeight() + getWeight(thisProduct) &lt;= getStationCapacity());
                sprite = getBuilding(thisProduct, "sprite");
                productName = translate(BUILDING, object_get_name(thisProduct));
                buyingNotice = productName+"#"+translate("BUILDING_TIP", object_get_name(thisProduct));
                if (string_length(productName) &gt; 8){
                    productName = string_delete(productName, 8, 1000)+".";
                }
                stock = getHardStock(thisProduct);
                needs = "";
            }
            else if (thisProduct == "upgrade"){
                price = UPGRADE_COST * object_station.company[? "level"]*1.5;
                sprite = sprite_ui_upgradestation;
                var level = object_station.company[? "level"];
                buyingNotice = translate("EMMETSUNITED", "upgradeNeeds");
                buyingNotice = string_replace(buyingNotice, "%s", numberFormat(level+1));
                buyingNotice = string_replace(buyingNotice, "%s", numberFormat(getStationCapacity(level)));
                buyingNotice = string_replace(buyingNotice, "%s",  numberFormat(getStationCapacity(level+1)));
                buyingNotice = string_replace(buyingNotice, "%s", numberFormat(CREW_CAPACITY*level));
                buyingNotice = string_replace(buyingNotice, "%s",  numberFormat(CREW_CAPACITY*(level+1)));
                needs = "#";
                stock = 0;
                productName = translate("EMMETSUNITED", thisProduct);
            }
            
            var productSize =  ((right-left-interiorPadding*3 - productsSpacing)/productsPerLine);
            
            var posX = left + interiorPadding + (productsSpacing + productSize) *(i%productsPerLine);
            var posY = top + interiorPadding + (productsSpacing + productSize) * floor(i/productsPerLine)
            
            var myColors = colors;
            if (selectedProduct == thisProduct) myColors = hoveredColors;
            else if (object_station.company[? "funds"] &lt; price) myColors = greyedColors;
            else if (hoveredProduct == thisProduct) myColors = hoveredColors;
            
            drawBlock(array(posX, posY, posX+productSize, posY+productSize), myColors);
            draw_sprite(sprite, 0, posX+productSize/2, posY+productSize/2);
            
            /// Draw pricetag
            draw_set_valign(fa_bottom);
            draw_set_halign(fa_right);
            draw_set_font(font_ui);
            var myColors = colors;
            if (object_station.company[? "funds"] &lt; price) myColors = array(c_red, COLOR_BACKGROUND(), COLOR_SHADOW());
            else if (hoveredProduct == thisProduct || selectedProduct == thisProduct) myColors = hoveredColors;
            drawShadowedText(floor(posX+productSize), floor(posY+productSize),  productName+"# ₵"+numberFormat(price), myColors, productSize);
        
         /// RIGHT PART
            if (selectedProduct == thisProduct){
                /// Textbox
                var textBox = array(txLeft, top, realRight-interiorPadding, top+height/2);
                
                draw_set_valign(fa_top);
                draw_set_halign(fa_left);
                draw_set_font(font_ui);
        
                draw_set_color(COLOR_FOREGROUND());
                draw_roundrect(textBox[0], textBox[1], textBox[2], textBox[3], true);
                
                drawShadowedText(
                            floor(textBox[0]+interiorPadding+textInteriorPadding), 
                            floor(textBox[1]+interiorPadding+textInteriorPadding), 
                            buyingNotice+"##"+needs,
                            colors,
                            textBox[2]-textBox[0]-2*(interiorPadding+textInteriorPadding)
                                );
                                
                var buyBox = array(txLeft, top+height/2+interiorPadding, realRight-interiorPadding, top+height/2+interiorPadding+buttonZoneHeight);
                
                draw_set_color(COLOR_FOREGROUND());
                if (hoveredBuyBox){
                    draw_roundrect(buyBox[0], buyBox[1], buyBox[2], buyBox[3], false);
                    draw_set_color(COLOR_BACKGROUND());
                }
                draw_roundrect(buyBox[0], buyBox[1], buyBox[2], buyBox[3], true);
                var text = translate("EMMETSUNITED", "buyThisProduct");
                if (stock &gt; 0){
                    var translation = translate("EMMETSUNITED", "already");
                    text += " ("+string_replace(translation, "%s", string(stock))+")";
                }
                draw_set_valign(fa_middle);
                draw_set_halign(fa_center);
                draw_set_font(font_ui);
                drawShadowedText(floormean(buyBox[0], buyBox[2]), floormean(buyBox[1], buyBox[3]), text);                                
            }
        }                
        /// OK Button
        
        var okBox = array(txLeft, bottom-buttonZoneHeight, realRight-interiorPadding, bottom);
                
        if (productsHoveringOK){
            draw_set_color(COLOR_FOREGROUND());
            draw_roundrect(okBox[0], okBox[1], okBox[2], okBox[3], false);
        }
        draw_set_color(COLOR_FOREGROUND());
        if (productsHoveringOK) draw_set_color(COLOR_BACKGROUND());
        draw_roundrect(okBox[0], okBox[1], okBox[2], okBox[3], true);
        
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        
        var text = translate("GENERAL_UI", "back");
        
        draw_set_font(font_ui);
        
        var colorsUsed = hostWindow.colors;
        if (productsHoveringOK){
            colorsUsed = hostWindow.hoveredColors;
        }
                    
        drawShadowedText(okBox[0]+(okBox[2]-okBox[0])/2, okBox[1]+(okBox[3]-okBox[1])/2, text, colorsUsed);
        
        break;
        
        
    case EMMETSUNITED_RECRUIT:
        draw_set_color(COLOR_FOREGROUND());
        
        
        /// END OF
        
        /// Cadre for the list
        var block = array(
                left,
                top,
                x+listWidth,
                bottom
        );
        
        var surf = surface_create(block[2]-block[0], block[3]-block[1]);
        
        if (surface_exists(surf)){
            
            surface_set_target(surf);
            draw_clear(colors[1]);
            var right = x+listWidth;
            var txLeft = right + interiorPadding;
            var realRight = x+width-UI_RIGHT_BAND;
            
            var crewList = object_market.marketCrew;
            
            for (var i = 0; i &lt; ds_list_size(crewList); i++){
                var thisMember = crewList[|i];
                /// Calculate price
                var price = EMMET_MARKET_PRICE;
                var trainings = thisMember[? "trainings"];
                for (var j = 0; j &lt; ds_list_size(thisMember[? "trainings"]); j++){
                    price += getTrainingPrice(trainings[| j]);
                }
                
                var color = getEmmetColor(thisMember);
                var sprite = sprite_emmet_walking_side;
                var buyingNotice = thisMember[? "name"]+"#"+translate("EMMETSUNITED", "previousOwner")+"#"+string(thisMember[? "previousOwner"])+"##"+formatBiography(thisMember);
                
                var productSize =  ((right-left-interiorPadding*3 - productsSpacing)/productsPerLine);
                
                var posX = interiorPadding + (productsSpacing + productSize) *(i%productsPerLine);
                var posY = interiorPadding + (productsSpacing + productSize) * floor(i/productsPerLine) + scrollHandleHeight - recruitScrollPosition;
                
                var myColors = colors;
                if (selectedEmmet == thisMember) myColors = hoveredColors;
                else if (object_station.company[? "funds"] &lt; price) myColors = greyedColors;
                else if (hoveredEmmet == thisMember) myColors = hoveredColors;
                
                drawBlock(array(posX, posY, posX+productSize, posY+productSize), myColors);
                draw_sprite_ext(sprite, 0, posX+productSize/2, posY+productSize/2, 1, 1, 0, color, 1);
                
                /// Draw price
                draw_set_valign(fa_bottom);
                draw_set_halign(fa_right);
                draw_set_font(font_ui);
                var myColors = colors;
                if (object_station.company[? "funds"] &lt; price) myColors = array(c_red, COLOR_BACKGROUND(), COLOR_SHADOW());
                else if (hoveredEmmet == thisMember || selectedEmmet == thisMember) myColors = hoveredColors;
                drawShadowedText(floor(posX+productSize), floor(posY+productSize-string_height("A")-2), thisMember[? "name"], myColors);
                drawShadowedText(floor(posX+productSize), floor(posY+productSize),  "₵"+numberFormat(price), myColors);
            
                surface_reset_target();
             /// RIGHT PART
                if (selectedEmmet == thisMember){
                    /// Textbox
                    var textBox = array(txLeft, top, realRight-interiorPadding, top+height/2);
                    
                    draw_set_valign(fa_top);
                    draw_set_halign(fa_left);
                    draw_set_font(font_ui);
            
                    draw_set_color(COLOR_FOREGROUND());
                    draw_roundrect(textBox[0], textBox[1], textBox[2], textBox[3], true);
                    
                    drawShadowedText(
                                floor(textBox[0]+interiorPadding+textInteriorPadding), 
                                floor(textBox[1]+interiorPadding+textInteriorPadding), 
                                buyingNotice,
                                colors,
                                textBox[2]-textBox[0]-2*(interiorPadding+textInteriorPadding)
                                    );
                                    
                    var buyBox = array(txLeft, top+height/2+interiorPadding, realRight-interiorPadding, top+height/2+interiorPadding+buttonZoneHeight);
                    
                    draw_set_color(COLOR_FOREGROUND());
                    if (hoveredBuyBox){
                        draw_roundrect(buyBox[0], buyBox[1], buyBox[2], buyBox[3], false);
                        draw_set_color(COLOR_BACKGROUND());
                    }
                    draw_roundrect(buyBox[0], buyBox[1], buyBox[2], buyBox[3], true);
                    var text = translate("EMMETSUNITED", "buyThisProduct");
                    
                    
                    draw_set_valign(fa_middle);
                    draw_set_halign(fa_center);
                    draw_set_font(font_ui);
                    drawShadowedText(floormean(buyBox[0], buyBox[2]), floormean(buyBox[1], buyBox[3]), text);                                
                }
                surface_set_target(surf);
            }           
            surface_reset_target();
            drawBlock(block, colors);
            draw_surface(surf, left, top);
            surface_free(surf);
        }
        /// HANDLES
        var myColors = colors;
        if (recruitHoveredHandles[0]){
            myColors = hoveredColors;
        }
        else if (!recruitEnableHandles[0]){
            myColors = greyedColors;
        }
        var upperHandle = array(left, top, right, top+scrollHandleHeight);
        drawBlock(upperHandle, myColors, 1);
        draw_arrow(mean(upperHandle[0], upperHandle[2]), upperHandle[3]-scrollHandleHeight/4, mean(upperHandle[0], upperHandle[2]), upperHandle[1]+scrollHandleHeight/4, scrollHandleHeight/2);
    
        
        var myColors = colors;
        if (recruitHoveredHandles[1]){
            myColors = hoveredColors;
        }
        else if (!recruitEnableHandles[1]){
            myColors = greyedColors;
        }
        var bottomHandle = array(left, bottom-scrollHandleHeight, right, bottom);
        drawBlock(bottomHandle, myColors, 1);
        draw_arrow(mean(bottomHandle[0], bottomHandle[2]), bottomHandle[1]+scrollHandleHeight/4, mean(bottomHandle[0], bottomHandle[2]), bottomHandle[3]-scrollHandleHeight/4, scrollHandleHeight/2);
        
             
        /// OK Button
        
        var okBox = array(right+interiorPadding, bottom-buttonZoneHeight, realRight-interiorPadding, bottom);
                
        if (recruitHoveringOK){
            draw_set_color(COLOR_FOREGROUND());
            draw_roundrect(okBox[0], okBox[1], okBox[2], okBox[3], false);
        }
        draw_set_color(COLOR_FOREGROUND());
        if (recruitHoveringOK) draw_set_color(COLOR_BACKGROUND());
        draw_roundrect(okBox[0], okBox[1], okBox[2], okBox[3], true);
        
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        
        var text = translate("GENERAL_UI", "back");
        
        draw_set_font(font_ui);
        
        var colorsUsed = hostWindow.colors;
        if (recruitHoveringOK){
            colorsUsed = hostWindow.hoveredColors;
        }
                    
        drawShadowedText(okBox[0]+(okBox[2]-okBox[0])/2, okBox[1]+(okBox[3]-okBox[1])/2, text, colorsUsed);
        
        break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
