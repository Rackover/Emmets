<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_menu_item_7</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///VARS

unique();
depth = HUD_DEPTH+2;
preset = PRESET_DEFAULT;

//COUNTERS
columnWidth = 3;
itemsWSpacing = 12;
itemsHSpacing = 6;
headBandHeight = 41;    // Height between the icons and the top
margin = 3;

width = 128;       
height = 0; //Total height of the thing 

positionFromTop = 64;  // Height between top of the screen and box
iconSize = sprite_get_width(sprite_menus);
powerGaugeHeight = 12;
headBandPadding = 2;
pressedItem = noone;
menuItems = array(noone);
hoveredItem = noone;
hotkeySize = 10;
makeTip = '';
selectionName = '';
discardBarSprite = sprite_ui_rightArrow;
discardBarWidth = sprite_get_width(discardBarSprite) + margin*2;

colors = array(COLOR_FOREGROUND(), COLOR_BACKGROUND(), COLOR_SHADOW());
hoveredColors = array(COLOR_BACKGROUND(), COLOR_FOREGROUND(), COLOR_SHADOW());
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Exit if paused OR NOT A GAME ROOM
///EXIT IF MAIN MENU
if (notAGameRoom(room)){
    visible = false;
    exit;
}
else{
    visible = true;
}

if (object_game.paused){
    exit;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var h = view_hview[view_current];
var w = view_wview[view_current];
var vx = view_xview[view_current];
var vy = view_yview[view_current];

y = vy+positionFromTop;
x = vx + w - width - UI_RIGHT_BAND;

makeTip = '';
menuItems = array(noone);

if (hasSelection(BUILDING) &amp;&amp; instance_exists(object_masterselector.selectedBuilding)){
    /// SELECTED A BUILDING

    preset = PRESET_BUILDINGS;
}
else if (emmetSelectionSize() &gt; 0 &amp;&amp; hasSelection(EMMET)){
    /// SELECTED EMMETS
    
    preset = PRESET_EMMETS;
}
else if (hasSelection(GRIDCELL) &amp;&amp;  getGravel(object_masterselector.selection) != noone){
    /// SELECTED A GRAVEL CELL
    
    preset = PRESET_GRIDCELL_GRAVEL;
}
else if (hasSelection(GRIDCELL) &amp;&amp; instance_exists(onChunk(object_masterselector.selection, object_ground_pathway))){
    /// SELECTED A PATHWAY CELL
    
    preset = PRESET_GRIDCELL_PATHWAY;
}
else if (hasSelection(GRIDCELL) &amp;&amp; instance_exists(onChunk(object_masterselector.selection, object_building_yard))){
    /// SELECTED A PATHWAY CELL
    preset = PRESET_YARD;
}
else if (hasSelection(GRIDCELL) &amp;&amp; !isOccupied(object_masterselector.selection)){
    /// SELECTED AN EMPTY CELL
    
    preset = PRESET_GRIDCELL;
}
else if (hasSelection(WALL)){
    /// SELECTED A WALL
    preset = PRESET_WALL;
}
else{
    /// NOTHING SELECTED
    preset = PRESET_DEFAULT;
    exit;
}


/////
/// GENERAL PRESETS
/////
switch(preset){
    default:
        menuItems = array(noone);
        break;
            
    case PRESET_BUILDINGS:
        switch (object_masterselector.selectedBuilding.object_index){
            default:
                menuItems = array(ITEM_POWER, ITEM_KILL_BUILDING);
                break;
        
            case object_building_uplinker:
                menuItems = array(ITEM_POWER, ITEM_KILL_BUILDING, ITEM_CALL_EMMET);
                break;
        }
        break;
        
    case PRESET_GRIDCELL:
        menuItems = array(ITEM_BUILD_PATHWAY);
        selectionName = translate("SELECTION", preset);
        break;
        
    case PRESET_GRIDCELL_GRAVEL:
        menuItems = array(ITEM_CLEAR_GRAVEL);
        selectionName = translate("SELECTION", preset);
        break;
        
    case PRESET_GRIDCELL_PATHWAY:
        menuItems = array(ITEM_DESTROY_PATHWAY);
        selectionName = translate("SELECTION", preset);
        break;
        
    case PRESET_EMMETS:
        menuItems = array(ITEM_DROP_OBJECT, ITEM_KILL_EMMET);
        break;
        
    case PRESET_YARD:
        menuItems = array(ITEM_CANCEL_YARD);
        break;
        
    case PRESET_WALL:
        switch (ds_grid_get(global.terrain_walls, object_masterselector.selection[0], object_masterselector.selection[1])){
        
            case TERRAIN_WALL_DIRT:
                menuItems = array(ITEM_DRILL_WALL, ITEM_DYNAMITE_WALL);
                selectionName = translate("SELECTION", string(preset))+" ("+translate("SELECTION", string(preset)+"."+string(TERRAIN_WALL_DIRT))+")";
                break;
                
            case TERRAIN_WALL_HARDROCK:
                menuItems = array(ITEM_DYNAMITE_WALL);
                selectionName = translate("SELECTION", string(preset))+" ("+translate("SELECTION", string(preset)+"."+string(TERRAIN_WALL_HARDROCK))+")";
                break;
        }
        break;
}

///////////
//// SPECIFIC BEHAVIOR 

greyedItems = array(0);
textOfItem = array(0);

for (var i = 0; i &lt; array_length_1d(menuItems); i++){
    greyedItems[i] = false;
    textOfItem[i] = "";
    if (preset == PRESET_BUILDINGS){
        var build = object_masterselector.selectedBuilding;
        if (!isOperational(build) &amp;&amp; menuItems[i] != ITEM_POWER){
            greyedItems[i] = true;
        }
        if (menuItems[i] == ITEM_CALL_EMMET){
            if (crewMembersRemaining() &lt;= 0){
                greyedItems[i] = true;
            }
            else if (getTPCooldown(build) &gt; 0){
                textOfItem[i] = string(getTPCooldown(build))+"s";
                greyedItems[i] = true;
            }
        }
        else if (menuItems[i] == ITEM_KILL_BUILDING){
            greyedItems[i] = !build.powered;
        }
        /*
        else if (menuItems[i] == ITEM_POWER){
            greyedItems[i] = true;
        }
        */
    }
    else if (preset == PRESET_EMMETS){
        var emmet = object_masterselector.selectedEmmets[| 0]; // First one of the selection
        if (is_undefined(emmet)){
            continue;
        }
        if (menuItems[i] == ITEM_DROP_OBJECT &amp;&amp; !instance_exists(emmet.holding)){
            greyedItems[i] = true;
        }
        
        /// Trainings hovering
        var trainings = getTrainings();
        var selectedObj = ds_list_find_value(object_masterselector.selectedEmmets , 0);
        for (var j = 0; j &lt; array_length_1d(trainings)+ds_list_size(selectedObj.equipments); j++){
            var thisItem = 0;
            
            var spritePos = array(
                            x+j*(sprite_get_width(sprite_ui_trainequip_empty)+2)+margin+iconSize+margin+headBandPadding, 
                            y+headBandHeight-margin-6-sprite_get_height(sprite_ui_trainequip_empty)
                            );
            if (j &gt;= ds_list_size(selectedObj.equipments)){
                thisItem = trainings[j-ds_list_size(selectedObj.equipments)];
                if (hasTraining(thisItem, selectedObj)){
                    var block = array(  spritePos[0], 
                                        spritePos[1], 
                                        spritePos[0]+sprite_get_width(sprite_ui_trainequip_empty), 
                                        spritePos[1]+sprite_get_height(sprite_ui_trainequip_empty));
                    if (mouseIn(block)){
                        makeTip = translate("EMMET_TRAINING", thisItem);
                    }
                }
                
            }
            else{
                thisItem = selectedObj.equipments[| j];
                if (hasEquipment(thisItem, selectedObj)){
                    var block = array(  spritePos[0], 
                                        spritePos[1], 
                                        spritePos[0]+sprite_get_width(sprite_ui_trainequip_empty), 
                                        spritePos[1]+sprite_get_height(sprite_ui_trainequip_empty));
                    if (mouseIn(block)){
                        makeTip = translate("EMMET_EQUIPMENT", thisItem);
                    }
                };
            }
        }
    }
    else if (preset == PRESET_WALL){
        var wall = getWallMap(object_masterselector.selection);
        if (menuItems[i] == ITEM_DRILL_WALL &amp;&amp; getMaxDrillPower() &lt; ds_map_find_value(wall, "solidity")){
            greyedItems[i] = true;
        }
        else if (menuItems[i] == ITEM_DYNAMITE_WALL &amp;&amp; !getDynamiteState()){
            greyedItems[i] = true;
        }
    }
    else if (preset == PRESET_GRIDCELL_GRAVEL){
        if (instance_number(object_emmet) &lt; 1){
            greyedItems[i] = true;
        }
    }
    else if (preset == PRESET_GRIDCELL){
        if (instance_number(object_emmet) &lt; 1 || ds_list_size(object_buildman.buildingList) &gt;= MAX_YARDS){
            greyedItems[i] = true;
        }
    }
}

/// Hover calculation
var hoveredSomething = false;
for (var i = 0; i &lt; array_length_1d(menuItems); i ++){
    var greyed = greyedItems[i];
    var item = menuItems[i];
    var spritePos = array(
        x+margin+(iconSize+itemsWSpacing)*(i%columnWidth),
        y+margin+headBandHeight+(iconSize+itemsHSpacing)*(floor(i/columnWidth))
    );
        
    if (getSetting("enableHotkeys") &amp;&amp; !global.i[I_BUILDINGS]){
        if (global.i[getItemHotkey(i)] &amp;&amp; !greyed){
            playSfx(sound_sfx_select);
            executeItem(item);
        }
    }
    
    var spriteBlock = array(spritePos[0], spritePos[1], spritePos[0]+iconSize, spritePos[1]+iconSize);
    
    if (mouseIn(spriteBlock)){
        
        if (!greyed){
            hoveredItem = i;
            hoveredSomething = true;
            if (global.i[I_SELECT]){
                playSfx(sound_sfx_select);
                executeItem(item);
            }
        }
        else{
            makeTip = (getDisabledTip(menuItems[i]));
        }
    }
}
if (!hoveredSomething){
    hoveredItem = noone;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var h = view_hview[view_current];
var w = view_wview[view_current];
var vx = view_xview[view_current];
var vy = view_yview[view_current];

colors = array(COLOR_FOREGROUND(), COLOR_BACKGROUND(), COLOR_SHADOW());
hoveredColors = array(COLOR_BACKGROUND(), COLOR_FOREGROUND(), COLOR_SHADOW());

if (menuItems[0] == noone || !hasSelection()){
    exit;
}

var numOfItems = array_length_1d(menuItems);
var containerHeight = headBandHeight+(itemsHSpacing+iconSize)*(ceil(numOfItems/columnWidth))+margin*2;
var containerWidth = width;

var displayPos = array(noone, noone);

var previewSurf = surface_create(iconSize, iconSize);

if (preset == PRESET_BUILDINGS){
    /*
    if (!hasSelection(BUILDING)){
        surface_free(previewSurf);
        exit;
    }
    */
    var selectedObj = object_masterselector.selectedBuilding;
    displayPos = sysToDisplay(array(selectedObj.x-G_CELLSIZE, selectedObj.y-G_CELLSIZE));
    displayPos[0] -= G_CELLSIZE;
}
else if (preset == PRESET_EMMETS){
    /*
    if (!hasSelection(EMMET)){
        surface_free(previewSurf);
        exit;
    }
    */
    var selectedObj = ds_list_find_value(object_masterselector.selectedEmmets , 0);
    displayPos = sysToDisplay(array(selectedObj.x, selectedObj.y));
    displayPos[0] -= G_CELLSIZE;
    displayPos[1] -= G_CELLSIZE;
}
else if (hasSelection()){
    displayPos = sysToDisplay(array(
            object_masterselector.selection[0]*G_CELLSIZE,
            object_masterselector.selection[1]*G_CELLSIZE
            ));
    displayPos[0] -= G_CELLSIZE;
    displayPos[1] -= G_CELLSIZE;
}
if (surface_exists(previewSurf)){
    surface_copy_part(previewSurf, 0, 0, application_surface, displayPos[0]-vx, displayPos[1]-vy, iconSize, iconSize);
}

height = containerHeight;

//// Discard button
var arrowSprite = sprite_ui_rightArrow;

draw_set_color(COLOR_SHADOW());
draw_rectangle(x-discardBarWidth+1, y+1, x+1, y+containerHeight+1, false) //BG
draw_set_color(merge_colour(COLOR_BACKGROUND(), c_black, 0.6));
draw_rectangle(x, y, x-discardBarWidth, y+containerHeight, false) //BG
draw_set_color(COLOR_BACKGROUND());
draw_rectangle(x, y, x-discardBarWidth, y+containerHeight, true) //BG


if (global.i[I_SELECT]){
    if (point_in_rectangle(global.i[I_X], global.i[I_Y], x-discardBarWidth, y, x, y+containerHeight)){
        playSfx(sound_sfx_select);
        clearSelection();
        exit;
    }
}

draw_sprite_ext(discardBarSprite, 0, x-discardBarWidth/2+1, y+containerHeight/2+1, 1, 1, 0, c_black, 1);    ///Shad
draw_sprite(discardBarSprite, 0, x-discardBarWidth/2, y+containerHeight/2);

//// Shadow drawing
draw_set_color(COLOR_SHADOW());
draw_rectangle(x+1, y+1, x+containerWidth+1, y+containerHeight+1, false) //BG

//// Background drawing
draw_set_color(COLOR_BACKGROUND());
draw_rectangle(x, y, x+containerWidth, y+containerHeight, false) //BG
draw_set_color(COLOR_FOREGROUND());
draw_rectangle(x, y, x+containerWidth, y+containerHeight, true) //BG

//// Headband Drawing
var previewZonePos = array(x+margin, y+margin);
if (hasSelection()){
    draw_surface(previewSurf, previewZonePos[0], previewZonePos[1]);
}


if (preset == PRESET_BUILDINGS){
    var selectedObj = object_masterselector.selectedBuilding;
    selectionName = translate(BUILDING, object_get_name(selectedObj.object_index));
    
    // power drawing
    var powerPos = array(x+margin+iconSize+margin+headBandPadding,
                    y+headBandHeight-margin-headBandPadding-powerGaugeHeight,
                    x+width-margin-headBandPadding,
                    y+headBandHeight-margin-headBandPadding);
                    
    draw_set_color(COLOR_SHADOW());
    draw_rectangle(powerPos[0]+1, powerPos[1]+1, powerPos[2]+1, powerPos[3]+1, false) //SHA
    
    draw_set_valign(fa_middle);
    draw_set_halign(fa_center);
    
    draw_set_font(font_tiniest);
    
    /*
    if (isBattery(selectedObj.object_index)){
        draw_set_color(staminaColor(selectedObj.gauge));
        draw_rectangle(powerPos[0], powerPos[1], powerPos[0]+(powerPos[2]-powerPos[0])*selectedObj.gauge, powerPos[3],
                        false);
        
        draw_set_color(c_white);
        
        if (selectedObj.powerSwitch){
             draw_text(x+mean(margin+iconSize+margin+headBandPadding, width-margin-headBandPadding),
                  y+headBandHeight-margin-headBandPadding-powerGaugeHeight/2,
                  translate("POWER", "BATTERY")
              );
        }
        else{
             draw_text(x+mean(margin+iconSize+margin+headBandPadding, width-margin-headBandPadding),
                  y+headBandHeight-margin-headBandPadding-powerGaugeHeight/2,
                  translate("POWER", -1)
              );
        }
    }
    else{
    */
        var powerState = selectedObj.powered;
        if (!selectedObj.powerSwitch){
            powerState = -1;
        }
        draw_set_color(powerColor(powerState));
        draw_rectangle(powerPos[0], powerPos[1], powerPos[2], powerPos[3],
                        false);
        
        draw_set_color(c_white);
        
        draw_text(x+floormean(margin+iconSize+margin+headBandPadding, width-margin-headBandPadding),
                  y+floor(headBandHeight-margin-headBandPadding-powerGaugeHeight/2),
                  stripAccents(translate("POWER", powerState))
                  );
    //}
}
else if (preset == PRESET_EMMETS){
    var selectedObj = object_masterselector.selectedEmmets[| 0];    /// first element of the list
    if (!is_undefined(selectedObj)){
        selectionName = selectedObj.name;
        
        // stamina drawing
        var staminaPos = array(x+margin+iconSize+margin+headBandPadding,
                        y+headBandHeight-margin-headBandPadding-1,
                        x+width-margin-headBandPadding,
                        y+headBandHeight-margin-headBandPadding);
                        
        draw_set_color(COLOR_SHADOW());
        draw_rectangle(staminaPos[0]+1, staminaPos[1]+1, staminaPos[2]+1, staminaPos[3]+1, false) //SHA
        
        draw_set_color(staminaColor(selectedObj.actHp/selectedObj.maxHp));
        draw_rectangle(staminaPos[0], staminaPos[1], staminaPos[0] + (staminaPos[2]-staminaPos[0])*(selectedObj.actHp/selectedObj.maxHp), staminaPos[3],
                        false);
        var trainings = getTrainings();
        
        for (var i = 0; i &lt; array_length_1d(trainings)+ds_list_size(selectedObj.equipments); i++){
            var thisItem = 0;
            
            var spritePos = array(
                            x+i*(sprite_get_width(sprite_ui_trainequip_empty)+2)+margin+iconSize+margin+headBandPadding, 
                            y+headBandHeight-margin-6-sprite_get_height(sprite_ui_trainequip_empty)
                            );
            if (i &gt;= ds_list_size(selectedObj.equipments)){
                thisItem = trainings[i-ds_list_size(selectedObj.equipments)];
                if (hasTraining(thisItem, selectedObj)) draw_sprite(getTrainingSprite(thisItem), 0, spritePos[0], spritePos[1]);
                else draw_sprite(sprite_ui_train, 0, spritePos[0], spritePos[1]);
                
            }
            else{
                thisItem = selectedObj.equipments[| i];
                if (hasEquipment(thisItem, selectedObj)) draw_sprite(getEquipmentSprite(thisItem), 0, spritePos[0], spritePos[1]);
                else draw_sprite(sprite_ui_equip, 0, spritePos[0], spritePos[1]);
            }
        }
                        
        draw_set_color(c_white);
        draw_set_valign(fa_middle);
        draw_set_halign(fa_center);
    }
}

draw_set_color(COLOR_FOREGROUND());
draw_rectangle(previewZonePos[0], previewZonePos[1], previewZonePos[0]+iconSize, previewZonePos[1]+iconSize, true);

draw_set_font(font_tiniest);
draw_set_valign(fa_top);
draw_set_halign(fa_left);
drawShadowedText(x+margin+iconSize+margin+headBandPadding,
                 y+margin+headBandPadding,
                 stripAccents(selectionName));


//// Items drawing
for (var i = 0; i &lt; numOfItems; i ++){

    var cooldownNotice = textOfItem[i];
    var greyed = greyedItems[i];
    var item = menuItems[i];
    var spritePos = array(
        x+margin+(iconSize+itemsWSpacing)*(i%columnWidth),
        y+margin+headBandHeight+(iconSize+itemsHSpacing)*(floor(i/columnWidth))
    );
    var sprite = asset_get_index("sprite_menu_item_"+string(item));
    
    if (isOperational(getTeleportPoint())){
        var actCD = getTPCooldown(getTeleportPoint());
        var pc = floor((1-actCD/TELEPORT_COOLDOWN)*100);
        text = string(pc)+"%";
    }
    
    /// Block
    var myColors = colors;
    if (hoveredItem == i){
        myColors = hoveredColors;
    }
    if (greyed) myColors = array(COLOR_BACKGROUND(), COLOR_BACKGROUND(), COLOR_SHADOW());
    drawBlock(array(spritePos[0], spritePos[1], spritePos[0]+iconSize, spritePos[1]+iconSize), myColors);
    
    /// Sprite
    var subject = 0;
    if (hasSelection(EMMET)){
        subject = object_masterselector.selectedEmmets[|0];
    }
    else if (hasSelection(BUILDING)){
        subject = object_masterselector.selectedBuilding;
    }
    else{
        subject = object_masterselector.selection;
    }
    var state = getItemState(item, subject);
    if (greyed) shader_set(shader_grayscale);
    draw_sprite(sprite, state, spritePos[0], spritePos[1]);
    shader_reset();
    
    ///  Cooldown text
    draw_set_font(font_ui);
    draw_set_valign(fa_middle);
    draw_set_halign(fa_center);
    draw_set_color(c_black);
    draw_text(spritePos[0]+iconSize/2+1, spritePos[1]+iconSize/2+1, cooldownNotice);
    draw_set_color(c_white);
    draw_text(spritePos[0]+iconSize/2, spritePos[1]+iconSize/2, cooldownNotice);
    
    /// Hotkey overlay
    if (getSetting("enableHotkeys") &amp;&amp; getSetting("displayHotkeys") &amp;&amp; !global.i[I_BUILDINGS]){
        var block = array(spritePos[0] + hotkeySize,
                            spritePos[1] + hotkeySize,
                            spritePos[0],
                            spritePos[1]
                        );
        var hotColors = array(DEFAULT_COLOR, merge_colour(DEFAULT_COLOR,c_black, 0.4), COLOR_SHADOW());
        drawBlock(block, hotColors, 0);
        draw_set_font(font_tiniest);
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        drawShadowedText(mean(block[0], block[2]), mean(block[1], block[3]), chr(object_pad.key_map[getItemHotkey(i)]), hotColors);
    }
}

surface_free(previewSurf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
